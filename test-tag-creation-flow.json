[
    {
        "id": "test_tag_creation",
        "type": "tab",
        "label": "ðŸ§ª Test Tag Creation",
        "disabled": false,
        "info": "Test flow to create tags in Ignition from Node-RED simulation"
    },
    {
        "id": "create_test_tag",
        "type": "inject",
        "z": "test_tag_creation",
        "name": "Create Test Equipment Tag",
        "props": [
            {"p": "payload"}
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 160,
        "y": 100,
        "wires": [["prepare_test_equipment"]]
    },
    {
        "id": "prepare_test_equipment",
        "type": "function",
        "z": "test_tag_creation",
        "name": "Prepare Test Equipment",
        "func": "// Create test equipment registration\nconst testEquipment = {\n    action: 'register',\n    equipment: {\n        id: 'TEST_FERMENTER_001',\n        name: 'Test Fermenter 001',\n        type: 'tank',\n        variant: 'fermenter',\n        area: 'Test_Area',\n        location: 'Node-RED Test',\n        capabilities: {\n            sensors: ['temperature', 'pressure', 'level', 'pH'],\n            controls: ['cooling_valve', 'heating_element'],\n            alarms: ['high_temp', 'low_temp', 'high_pressure']\n        }\n    },\n    timestamp: new Date().toISOString()\n};\n\n// For Ignition tag creation, we need to create folder structure\nmsg.tagStructure = {\n    basePath: 'SteelBonnet/Test_Area/TEST_FERMENTER_001',\n    tags: [\n        {\n            name: 'Temperature',\n            dataType: 'Float',\n            value: 18.5,\n            units: 'Â°C'\n        },\n        {\n            name: 'Pressure',\n            dataType: 'Float', \n            value: 1.2,\n            units: 'bar'\n        },\n        {\n            name: 'Level',\n            dataType: 'Float',\n            value: 75.0,\n            units: '%'\n        },\n        {\n            name: 'Status',\n            dataType: 'String',\n            value: 'Running'\n        }\n    ]\n};\n\nmsg.payload = testEquipment;\nmsg.topic = 'test/equipment/register';\n\nnode.status({fill: 'blue', shape: 'ring', text: 'Equipment prepared'});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [["create_ignition_tags"]]
    },
    {
        "id": "create_ignition_tags",
        "type": "function",
        "z": "test_tag_creation",
        "name": "Create Ignition Tags",
        "func": "// Create individual tag writes for Ignition\nconst basePath = msg.tagStructure.basePath;\nconst tags = msg.tagStructure.tags;\n\n// Create array of messages for each tag\nconst messages = [];\n\ntags.forEach(tag => {\n    const nodeId = `ns=2;s=${basePath}/${tag.name}`;\n    \n    messages.push({\n        payload: {\n            nodeId: nodeId,\n            dataType: tag.dataType,\n            value: tag.value\n        },\n        topic: `ignition/write/${tag.name.toLowerCase()}`,\n        tagName: tag.name,\n        equipment: msg.payload.equipment.name\n    });\n});\n\n// Also create a status tag\nmessages.push({\n    payload: {\n        nodeId: `ns=2;s=${basePath}/LastUpdated`,\n        dataType: 'DateTime',\n        value: new Date()\n    },\n    topic: 'ignition/write/status',\n    tagName: 'LastUpdated',\n    equipment: msg.payload.equipment.name\n});\n\nnode.status({fill: 'green', shape: 'dot', text: `Creating ${messages.length} tags`});\n\n// Send all tag creation messages\nreturn [messages];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 100,
        "wires": [["opc_write_node", "debug_tag_creation"]]
    },
    {
        "id": "opc_write_node",
        "type": "OpcUa-Client",
        "z": "test_tag_creation",
        "endpoint": "opc_endpoint_ignition",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "Write to Ignition",
        "x": 860,
        "y": 100,
        "wires": [["write_result"]]
    },
    {
        "id": "write_result",
        "type": "function",
        "z": "test_tag_creation",
        "name": "Process Write Result",
        "func": "// Process the write result from Ignition\nif (msg.payload && msg.payload.statusCode) {\n    const success = msg.payload.statusCode.name === 'Good';\n    \n    if (success) {\n        node.status({fill: 'green', shape: 'dot', text: `Tag written: ${msg.tagName}`});\n        msg.result = {\n            success: true,\n            tagName: msg.tagName,\n            equipment: msg.equipment,\n            message: 'Tag created successfully'\n        };\n    } else {\n        node.status({fill: 'red', shape: 'ring', text: `Failed: ${msg.tagName}`});\n        msg.result = {\n            success: false,\n            tagName: msg.tagName,\n            error: msg.payload.statusCode.name,\n            message: 'Tag creation failed'\n        };\n    }\n} else {\n    node.status({fill: 'yellow', shape: 'ring', text: 'No response'});\n    msg.result = {\n        success: false,\n        error: 'No response from Ignition',\n        message: 'OPC-UA write timeout or connection issue'\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 100,
        "wires": [["result_display"]]
    },
    {
        "id": "result_display",\n        "type": "debug",\n        "z": "test_tag_creation",\n        "name": "Tag Creation Results",\n        "active": true,\n        "tosidebar": true,\n        "console": false,\n        "tostatus": false,\n        "complete": "result",\n        "targetType": "msg",\n        "statusVal": "",\n        "statusType": "auto",\n        "x": 1300,\n        "y": 100,\n        "wires": []\n    },\n    {\n        "id": "debug_tag_creation",\n        "type": "debug",\n        "z": "test_tag_creation",\n        "name": "Tag Structure",\n        "active": true,\n        "tosidebar": true,\n        "console": false,\n        "tostatus": false,\n        "complete": "payload",\n        "targetType": "msg",\n        "statusVal": "",\n        "statusType": "auto",\n        "x": 650,\n        "y": 160,\n        "wires": []\n    }\n]