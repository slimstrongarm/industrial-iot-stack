[
    {
        "id": "e8f9c23a.4d3a4",
        "type": "tab",
        "label": "Brewery WhatsApp Alerts",
        "disabled": false,
        "info": "WhatsApp integration for brewery equipment alerts"
    },
    {
        "id": "mqtt-equipment-data",
        "type": "mqtt in",
        "z": "e8f9c23a.4d3a4",
        "name": "Equipment Data",
        "topic": "brewery/+/+",
        "qos": "2",
        "datatype": "json",
        "broker": "brewery-mqtt",
        "x": 120,
        "y": 160,
        "wires": [["parse-equipment"]]
    },
    {
        "id": "parse-equipment",
        "type": "function",
        "z": "e8f9c23a.4d3a4",
        "name": "Parse & Check Thresholds",
        "func": "// Parse MQTT topic\nconst topicParts = msg.topic.split('/');\nconst equipment = topicParts[1];\nconst measurement = topicParts[2];\n\n// Equipment thresholds\nconst thresholds = {\n    'boiler': {\n        'temperature': { high: 80, low: 60 },\n        'pressure': { high: 15, low: 5 }\n    },\n    'fermenter': {\n        'temperature': { high: 75, low: 65 },\n        'ph': { high: 4.5, low: 4.0 }\n    },\n    'cooler': {\n        'temperature': { high: 40, low: 32 }\n    }\n};\n\n// Check if we have thresholds for this equipment/measurement\nif (thresholds[equipment] && thresholds[equipment][measurement]) {\n    const value = msg.payload.value;\n    const limits = thresholds[equipment][measurement];\n    \n    let alert = null;\n    \n    if (value > limits.high) {\n        alert = {\n            severity: 'HIGH',\n            message: `${equipment} ${measurement} too high`,\n            value: value,\n            limit: limits.high,\n            equipment: equipment,\n            measurement: measurement\n        };\n    } else if (value < limits.low) {\n        alert = {\n            severity: 'LOW',\n            message: `${equipment} ${measurement} too low`,\n            value: value,\n            limit: limits.low,\n            equipment: equipment,\n            measurement: measurement\n        };\n    }\n    \n    if (alert) {\n        msg.alert = alert;\n        // Rate limit: only send if no alert in last 5 minutes\n        const lastAlert = flow.get(`lastAlert_${equipment}_${measurement}`) || 0;\n        const now = Date.now();\n        \n        if (now - lastAlert > 300000) { // 5 minutes\n            flow.set(`lastAlert_${equipment}_${measurement}`, now);\n            return msg;\n        }\n    }\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 340,
        "y": 160,
        "wires": [["format-whatsapp-alert"]]
    },
    {
        "id": "format-whatsapp-alert",
        "type": "function",
        "z": "e8f9c23a.4d3a4",
        "name": "Format WhatsApp Message",
        "func": "const alert = msg.alert;\nconst timestamp = new Date().toLocaleString();\n\n// Emoji based on severity\nconst emoji = alert.severity === 'HIGH' ? 'üî¥' : 'üü°';\n\n// Format professional alert message\nconst message = `${emoji} BREWERY ALERT\n\nEquipment: ${alert.equipment.toUpperCase()}\nIssue: ${alert.measurement} ${alert.severity}\nReading: ${alert.value} ${getUnit(alert.measurement)}\nThreshold: ${alert.limit} ${getUnit(alert.measurement)}\nTime: ${timestamp}\n\n‚ö° Quick Actions:\n1Ô∏è‚É£ Acknowledge alert\n2Ô∏è‚É£ Request details\n3Ô∏è‚É£ Escalate to supervisor\n\nReply with number or action.`;\n\n// Get measurement units\nfunction getUnit(measurement) {\n    const units = {\n        'temperature': '¬∞F',\n        'pressure': 'PSI',\n        'ph': 'pH',\n        'flow': 'GPM'\n    };\n    return units[measurement] || '';\n}\n\nmsg.payload = {\n    to: msg.whatsappTo || 'whatsapp:+1234567890', // Set your number\n    body: message,\n    alert: alert\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 160,
        "wires": [["send-twilio", "log-to-sheets"]]
    },
    {
        "id": "send-twilio",
        "type": "function",
        "z": "e8f9c23a.4d3a4",
        "name": "Send via Twilio API",
        "func": "// Twilio credentials from environment\nconst accountSid = env.get('TWILIO_ACCOUNT_SID');\nconst authToken = env.get('TWILIO_AUTH_TOKEN');\nconst fromNumber = env.get('TWILIO_WHATSAPP_FROM') || 'whatsapp:+14155238886';\n\nif (!accountSid || !authToken) {\n    node.error('Twilio credentials not configured');\n    return null;\n}\n\n// Prepare Twilio API request\nmsg.method = 'POST';\nmsg.url = `https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`;\n\n// Basic auth header\nconst auth = Buffer.from(`${accountSid}:${authToken}`).toString('base64');\nmsg.headers = {\n    'Authorization': `Basic ${auth}`,\n    'Content-Type': 'application/x-www-form-urlencoded'\n};\n\n// URL encode the payload\nconst params = new URLSearchParams();\nparams.append('From', fromNumber);\nparams.append('To', msg.payload.to);\nparams.append('Body', msg.payload.body);\n\nmsg.payload = params.toString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 810,
        "y": 120,
        "wires": [["http-request"]]
    },
    {
        "id": "http-request",
        "type": "http request",
        "z": "e8f9c23a.4d3a4",
        "name": "Twilio API",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 120,
        "wires": [["check-response"]]
    },
    {
        "id": "check-response",
        "type": "function",
        "z": "e8f9c23a.4d3a4",
        "name": "Check Response",
        "func": "if (msg.statusCode === 201) {\n    // Success\n    msg.payload = {\n        status: 'sent',\n        messageId: msg.payload.sid,\n        to: msg.payload.to\n    };\n    node.status({fill:\"green\",shape:\"dot\",text:\"Message sent\"});\n} else {\n    // Error\n    msg.payload = {\n        status: 'error',\n        error: msg.payload\n    };\n    node.status({fill:\"red\",shape:\"dot\",text:\"Send failed\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1160,
        "y": 120,
        "wires": [["debug-output"]]
    },
    {
        "id": "log-to-sheets",
        "type": "function",
        "z": "e8f9c23a.4d3a4",
        "name": "Log Alert to Sheets",
        "func": "// Prepare Google Sheets log entry\nmsg.payload = {\n    timestamp: new Date().toISOString(),\n    equipment: msg.payload.alert.equipment,\n    measurement: msg.payload.alert.measurement,\n    severity: msg.payload.alert.severity,\n    value: msg.payload.alert.value,\n    threshold: msg.payload.alert.limit,\n    messageSent: true,\n    recipient: msg.payload.to\n};\n\n// Set topic for sheets node\nmsg.topic = 'log_alert';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 810,
        "y": 200,
        "wires": [["google-sheets-log"]]
    },
    {
        "id": "google-sheets-log",
        "type": "function",
        "z": "e8f9c23a.4d3a4",
        "name": "Google Sheets API",
        "func": "// This would connect to Google Sheets\n// For now, just format the data\nmsg.sheetsData = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 200,
        "wires": [[]]
    },
    {
        "id": "debug-output",
        "type": "debug",
        "z": "e8f9c23a.4d3a4",
        "name": "WhatsApp Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 120,
        "wires": []
    },
    {
        "id": "incoming-whatsapp",
        "type": "http in",
        "z": "e8f9c23a.4d3a4",
        "name": "WhatsApp Webhook",
        "url": "/webhook/whatsapp",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 340,
        "wires": [["parse-reply"]]
    },
    {
        "id": "parse-reply",
        "type": "function",
        "z": "e8f9c23a.4d3a4",
        "name": "Parse Operator Reply",
        "func": "// Parse Twilio webhook payload\nconst from = msg.payload.From;\nconst body = msg.payload.Body.toLowerCase();\nconst messageId = msg.payload.MessageSid;\n\n// Determine action from reply\nlet action = null;\n\nif (body.includes('1') || body.includes('acknowledge')) {\n    action = 'acknowledge';\n} else if (body.includes('2') || body.includes('details')) {\n    action = 'details';\n} else if (body.includes('3') || body.includes('escalate')) {\n    action = 'escalate';\n}\n\nmsg.reply = {\n    from: from,\n    action: action,\n    originalMessage: body,\n    timestamp: new Date()\n};\n\nif (action) {\n    return [msg, null]; // Valid action\n} else {\n    return [null, msg]; // Unknown command\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 340,
        "wires": [["handle-action"], ["help-message"]]
    },
    {
        "id": "handle-action",
        "type": "switch",
        "z": "e8f9c23a.4d3a4",
        "name": "Route Action",
        "property": "reply.action",
        "propertyType": "msg",
        "rules": [
            {"t": "eq", "v": "acknowledge", "vt": "str"},
            {"t": "eq", "v": "details", "vt": "str"},
            {"t": "eq", "v": "escalate", "vt": "str"}
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 570,
        "y": 320,
        "wires": [["acknowledge-alert"], ["send-details"], ["escalate-alert"]]
    },
    {
        "id": "acknowledge-alert",
        "type": "function",
        "z": "e8f9c23a.4d3a4",
        "name": "Acknowledge Alert",
        "func": "// Update alert status\nmsg.payload = {\n    action: 'acknowledged',\n    by: msg.reply.from,\n    timestamp: msg.reply.timestamp,\n    response: '‚úÖ Alert acknowledged. System notified.'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 280,
        "wires": [["send-confirmation"]]
    },
    {
        "id": "send-details",
        "type": "function",
        "z": "e8f9c23a.4d3a4",
        "name": "Get Equipment Details",
        "func": "// Fetch current equipment status\n// This would query your system\nmsg.payload = {\n    response: `üìä Current Status:\\n\\nBoiler:\\n‚Ä¢ Temperature: 78¬∞F ‚úÖ\\n‚Ä¢ Pressure: 12 PSI ‚úÖ\\n‚Ä¢ Runtime: 4.5 hrs\\n\\nLast maintenance: 3 days ago\\nNext scheduled: in 27 days`\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 800,
        "y": 320,
        "wires": [["send-confirmation"]]
    },
    {
        "id": "escalate-alert",
        "type": "function",
        "z": "e8f9c23a.4d3a4",
        "name": "Escalate to Supervisor",
        "func": "// Escalate to supervisor\nmsg.payload = {\n    escalateTo: 'whatsapp:+1234567890', // Supervisor number\n    response: 'üö® Alert escalated to supervisor. They will contact you shortly.',\n    originalAlert: msg.reply\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 800,
        "y": 360,
        "wires": [["send-confirmation"]]
    },
    {
        "id": "help-message",
        "type": "function",
        "z": "e8f9c23a.4d3a4",
        "name": "Help Response",
        "func": "msg.payload = {\n    response: `I didn't understand that. Available commands:\\n\\n1Ô∏è‚É£ or 'acknowledge'\\n2Ô∏è‚É£ or 'details'\\n3Ô∏è‚É£ or 'escalate'\\n\\nExample: Reply '1' to acknowledge the alert.`\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 380,
        "wires": [["send-confirmation"]]
    },
    {
        "id": "send-confirmation",
        "type": "function",
        "z": "e8f9c23a.4d3a4",
        "name": "Send WhatsApp Reply",
        "func": "// Format reply message\nmsg.payload = {\n    to: msg.reply.from,\n    body: msg.payload.response\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1040,
        "y": 320,
        "wires": [["send-twilio"]]
    },
    {
        "id": "http-response",
        "type": "http response",
        "z": "e8f9c23a.4d3a4",
        "name": "Webhook Response",
        "statusCode": "200",
        "headers": {},
        "x": 370,
        "y": 420,
        "wires": []
    },
    {
        "id": "brewery-mqtt",
        "type": "mqtt-broker",
        "name": "Brewery MQTT",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0", 
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    }
]