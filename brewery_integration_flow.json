{
  "id": "brewery_integration_flow",
  "label": "Zymnist Brewery Integration",
  "info": "Integration flow for Zymnist SBBC brewery MQTT data to UNS structure",
  "nodes": [
    {
      "id": "brewery_emqx_broker",
      "type": "mqtt-broker",
      "name": "Zymnist Cloud EMQX",
      "broker": "r77c68a0.ala.us-east-1.emqxsl.com",
      "port": "8883",
      "clientid": "steel-bonnet-integration",
      "autoConnect": true,
      "usetls": true,
      "protocolVersion": "4",
      "keepalive": "60",
      "cleansession": true,
      "birthTopic": "steel-bonnet/integration/status",
      "birthQos": "1",
      "birthPayload": "{\"status\":\"connected\",\"timestamp\":\"${timestamp}\"}",
      "closeTopic": "steel-bonnet/integration/status",
      "closeQos": "1",
      "closePayload": "{\"status\":\"disconnected\",\"timestamp\":\"${timestamp}\"}",
      "willTopic": "steel-bonnet/integration/status",
      "willQos": "1",
      "willPayload": "{\"status\":\"lost\",\"timestamp\":\"${timestamp}\"}"
    },
    {
      "id": "brewery_cmd_subscriber",
      "type": "mqtt in",
      "name": "Brewery Commands",
      "topic": "cmd/zymnist/sbbc/+/+",
      "qos": "1",
      "datatype": "json",
      "broker": "brewery_emqx_broker",
      "x": 150,
      "y": 100,
      "wires": [["brewery_cmd_processor"]]
    },
    {
      "id": "brewery_sta_subscriber", 
      "type": "mqtt in",
      "name": "Brewery Status",
      "topic": "sta/zymnist/sbbc/+/+",
      "qos": "1",
      "datatype": "json",
      "broker": "brewery_emqx_broker",
      "x": 150,
      "y": 160,
      "wires": [["brewery_sta_processor"]]
    },
    {
      "id": "thingsboard_tel_subscriber",
      "type": "mqtt in", 
      "name": "ThingsBoard Telemetry",
      "topic": "v1/devices/me/telemetry",
      "qos": "1",
      "datatype": "json",
      "broker": "brewery_emqx_broker",
      "x": 150,
      "y": 220,
      "wires": [["thingsboard_processor"]]
    },
    {
      "id": "brewery_cmd_processor",
      "type": "function",
      "name": "Process Brewery Commands",
      "func": "// Process brewery command messages and convert to UNS structure\n// Topic: cmd/zymnist/sbbc/zym-017556/hlt_heat_pid\n\nconst topicParts = msg.topic.split('/');\nconst msgType = topicParts[0];  // cmd\nconst app = topicParts[1];      // zymnist\nconst account = topicParts[2];  // sbbc\nconst botId = topicParts[3];    // zym-017556\nconst botletId = topicParts[4]; // hlt_heat_pid\n\n// Map botlet to equipment and location\nconst equipmentMap = {\n    'hlt_heat_pid': {\n        area: 'brew_house',\n        equipment: 'hlt',\n        function: 'temperature',\n        type: 'Hot Liquor Tank'\n    },\n    // Add more mappings as discovered\n    'fermenter_temp': {\n        area: 'production',\n        equipment: 'fermentation',\n        function: 'temperature',\n        type: 'Fermentation Tank'\n    },\n    'compressor_ctrl': {\n        area: 'utilities',\n        equipment: 'compressed_air', \n        function: 'pressure',\n        type: 'Air Compressor'\n    }\n};\n\nconst mapping = equipmentMap[botletId] || {\n    area: 'general',\n    equipment: botletId,\n    function: 'data',\n    type: 'Unknown Equipment'\n};\n\n// Create UNS topic structure\nconst unsBaseTopic = `salinas/brewery/${mapping.area}/${mapping.equipment}/${mapping.function}`;\nconst unsCommandTopic = `${unsBaseTopic}/command`;\n\n// Process payload - brewery sends structured commands\nconst command = msg.payload;\nlet unsPayload = {\n    source: {\n        system: 'zymnist_brewery',\n        bot_id: botId,\n        botlet_id: botletId,\n        original_topic: msg.topic,\n        message_type: 'command'\n    },\n    timestamp: new Date().toISOString(),\n    command: {\n        type: command.cmd || 'unknown',\n        properties: command.properties || {},\n        equipment_type: mapping.type\n    },\n    metadata: {\n        app: app,\n        account: account,\n        area: mapping.area,\n        equipment: mapping.equipment\n    }\n};\n\n// Create output messages\nconst unsMsg = {\n    topic: unsCommandTopic,\n    payload: unsPayload\n};\n\n// Also send to equipment registration if new equipment\nconst regMsg = {\n    topic: 'steel-bonnet/equipment/discovered',\n    payload: {\n        equipment_id: botletId,\n        equipment_type: mapping.type,\n        location: mapping.area,\n        discovery_source: 'brewery_mqtt',\n        timestamp: new Date().toISOString(),\n        capabilities: ['temperature_control', 'status_monitoring']\n    }\n};\n\nreturn [unsMsg, regMsg];",
      "outputs": 2,
      "x": 380,
      "y": 100,
      "wires": [["uns_mqtt_out"], ["equipment_registration"]]\n    },
    {
      "id": "brewery_sta_processor",
      "type": "function", \n      "name": "Process Brewery Status",
      "func": "// Process brewery status messages and convert to UNS structure\n// Topic: sta/zymnist/sbbc/zym-017556/hlt_heat_pid\n\nconst topicParts = msg.topic.split('/');\nconst msgType = topicParts[0];  // sta\nconst app = topicParts[1];      // zymnist\nconst account = topicParts[2];  // sbbc  \nconst botId = topicParts[3];    // zym-017556\nconst botletId = topicParts[4]; // hlt_heat_pid\n\n// Map botlet to equipment and location\nconst equipmentMap = {\n    'hlt_heat_pid': {\n        area: 'brew_house',\n        equipment: 'hlt', \n        function: 'temperature',\n        type: 'Hot Liquor Tank'\n    }\n};\n\nconst mapping = equipmentMap[botletId] || {\n    area: 'general',\n    equipment: botletId,\n    function: 'data',\n    type: 'Unknown Equipment'\n};\n\n// Create UNS topic structure\nconst unsBaseTopic = `salinas/brewery/${mapping.area}/${mapping.equipment}/${mapping.function}`;\nconst unsTelemetryTopic = `${unsBaseTopic}/telemetry`;\n\n// Process brewery status payload\nconst status = msg.payload;\nlet parameter = status.properties?.parameter;\n\nif (!parameter) {\n    node.warn('No parameter data in status message');\n    return null;\n}\n\n// Map parameter names to standardized names\nconst parameterMap = {\n    'analog_input_1': 'temperature_1',\n    'analog_input_2': 'temperature_2', \n    'heat_power': 'heating_power',\n    'set_point': 'setpoint',\n    'control_loop_mode': 'control_mode',\n    'analog_input_error_1': 'temperature_1_error',\n    'analog_input_error_2': 'temperature_2_error'\n};\n\nconst standardParam = parameterMap[parameter.name] || parameter.name;\n\n// Create UNS payload\nlet unsPayload = {\n    source: {\n        system: 'zymnist_brewery',\n        bot_id: botId,\n        botlet_id: botletId,\n        original_topic: msg.topic,\n        message_type: 'status'\n    },\n    timestamp: new Date().toISOString(),\n    value: parameter.value,\n    parameter: {\n        name: standardParam,\n        original_name: parameter.name,\n        unit: getParameterUnit(parameter.name),\n        quality: 'good'\n    },\n    equipment: {\n        type: mapping.type,\n        id: botletId,\n        area: mapping.area\n    },\n    metadata: {\n        app: app,\n        account: account\n    }\n};\n\n// Add alert information if parameter indicates an issue\nif (parameter.name.includes('error') && parameter.value !== 0) {\n    unsPayload.alert = {\n        level: 'warning',\n        message: `${parameter.name} error: ${parameter.value}`,\n        parameter: parameter.name\n    };\n}\n\n// Create specific topic based on parameter type\nlet specificTopic;\nif (parameter.name.includes('temperature') || parameter.name.includes('analog_input')) {\n    specificTopic = `${unsBaseTopic}/telemetry`;\n} else if (parameter.name.includes('power') || parameter.name.includes('heat')) {\n    specificTopic = `salinas/brewery/${mapping.area}/${mapping.equipment}/heating/telemetry`;\n} else if (parameter.name.includes('set_point') || parameter.name.includes('control')) {\n    specificTopic = `salinas/brewery/${mapping.area}/${mapping.equipment}/control/telemetry`;\n} else {\n    specificTopic = unsTelemetryTopic;\n}\n\n// Helper function to get parameter units\nfunction getParameterUnit(paramName) {\n    const unitMap = {\n        'analog_input_1': '°F',\n        'analog_input_2': '°F',\n        'heat_power': '%',\n        'set_point': '°F',\n        'control_loop_mode': 'mode'\n    };\n    return unitMap[paramName] || '';\n}\n\n// Create output messages\nconst unsMsg = {\n    topic: specificTopic,\n    payload: unsPayload\n};\n\n// Create OPC tag message for Ignition\nconst opcMsg = {\n    topic: 'ignition/opc/write',\n    payload: {\n        tagPath: `[Brewery]${mapping.area.charAt(0).toUpperCase() + mapping.area.slice(1)}/${mapping.equipment.toUpperCase()}/${standardParam}`,\n        value: parameter.value,\n        quality: 'good',\n        timestamp: new Date().toISOString()\n    }\n};\n\nreturn [unsMsg, opcMsg];",
      "outputs": 2,
      "x": 380,
      "y": 160,
      "wires": [["uns_mqtt_out"], ["opc_tag_writer"]]\n    },
    {
      "id": "thingsboard_processor",
      "type": "function",
      "name": "Process ThingsBoard Data", \n      "func": "// Process ThingsBoard telemetry messages\n// Topic: v1/devices/me/telemetry\n// Payload: {\"hlt_heat_pid.analog_input_1\": 152.5}\n\nconst telemetry = msg.payload;\nconst results = [];\n\n// Process each telemetry field\nfor (const [key, value] of Object.entries(telemetry)) {\n    // Parse key format: botlet_id.parameter_name\n    const keyParts = key.split('.');\n    if (keyParts.length !== 2) continue;\n    \n    const botletId = keyParts[0];\n    const parameterName = keyParts[1];\n    \n    // Map to UNS structure\n    const equipmentMap = {\n        'hlt_heat_pid': {\n            area: 'brew_house',\n            equipment: 'hlt',\n            function: 'temperature',\n            type: 'Hot Liquor Tank'\n        }\n    };\n    \n    const mapping = equipmentMap[botletId] || {\n        area: 'general',\n        equipment: botletId,\n        function: 'data',\n        type: 'Unknown Equipment'\n    };\n    \n    // Create UNS topic\n    const unsBaseTopic = `salinas/brewery/${mapping.area}/${mapping.equipment}/${mapping.function}`;\n    const unsTopic = `${unsBaseTopic}/telemetry`;\n    \n    // Create UNS payload\n    const unsPayload = {\n        source: {\n            system: 'thingsboard_brewery',\n            device_id: 'zymboard',\n            original_topic: msg.topic,\n            message_type: 'telemetry'\n        },\n        timestamp: new Date().toISOString(),\n        value: value,\n        parameter: {\n            name: parameterName,\n            botlet_id: botletId,\n            quality: 'good'\n        },\n        equipment: {\n            type: mapping.type,\n            id: botletId,\n            area: mapping.area\n        }\n    };\n    \n    results.push({\n        topic: unsTopic,\n        payload: unsPayload\n    });\n}\n\nreturn results;",
      "outputs": 1,
      "x": 380,
      "y": 220,
      "wires": [["uns_mqtt_out"]]\n    },
    {
      "id": "uns_mqtt_out",
      "type": "mqtt out",
      "name": "UNS MQTT Publisher",
      "topic": "",
      "qos": "1",
      "retain": "false",
      "broker": "mqtt_broker",
      "x": 650,
      "y": 160,
      "wires": []\n    },
    {
      "id": "equipment_registration",
      "type": "link out",
      "name": "To Equipment Registration",
      "mode": "link",
      "links": [],
      "x": 650,
      "y": 100,
      "wires": []\n    },
    {
      "id": "opc_tag_writer",
      "type": "link out", 
      "name": "To OPC Tag Writer",
      "mode": "link",
      "links": [],
      "x": 650,
      "y": 220,
      "wires": []\n    },
    {
      "id": "brewery_monitor",
      "type": "debug",
      "name": "Brewery Integration Monitor",
      "active": true,
      "tosidebar": true,
      "console": false,
      "tostatus": false,
      "complete": "true",
      "targetType": "full",
      "x": 480,
      "y": 280,
      "wires": []\n    },
    {
      "id": "brewery_status_inject",
      "type": "inject",
      "name": "Test Brewery Status",
      "props": [\n        {\n          "p": "payload"\n        },\n        {\n          "p": "topic",\n          "vt": "str"\n        }\n      ],
      "repeat": "",
      "crontab": "",
      "once": false,
      "onceDelay": 0.1,
      "topic": "sta/zymnist/sbbc/zym-017556/hlt_heat_pid",
      "payload": "{\"properties\":{\"parameter\":{\"name\":\"analog_input_1\",\"value\":152.5}}}",
      "payloadType": "json",
      "x": 160,
      "y": 340,
      "wires": [["brewery_sta_processor"]]\n    }\n  ]\n}