[
  {
    "id": "mqtt_alerts_bridge",
    "type": "tab",
    "label": "ðŸš¨ MQTT â†’ Alerts Bridge",
    "disabled": false,
    "info": "Bridge MQTT data to n8n alert system"
  },
  {
    "id": "brewery_data_monitor",
    "type": "mqtt in",
    "z": "mqtt_alerts_bridge",
    "name": "Monitor Brewery Data",
    "topic": "brewery/data/+/+",
    "qos": "0",
    "datatype": "json",
    "broker": "mqtt_broker_config",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 150,
    "y": 100,
    "wires": [["parse_equipment_data", "data_debug"]]
  },
  {
    "id": "parse_equipment_data",
    "type": "function",
    "z": "mqtt_alerts_bridge",
    "name": "Parse Equipment Data",
    "func": "// Parse incoming MQTT data from brewery equipment\nconst data = msg.payload;\nconst topic = msg.topic;\n\n// Extract equipment info from topic: brewery/data/protocol/equipment\nconst topicParts = topic.split('/');\nif (topicParts.length >= 4) {\n    const protocol = topicParts[2];\n    const equipmentName = topicParts[3];\n    \n    // Add topic parsing to message\n    msg.equipmentName = equipmentName;\n    msg.protocol = protocol;\n    \n    // Ensure we have the data structure we expect\n    if (data && data.equipment && data.value !== undefined) {\n        msg.payload = {\n            equipmentId: `${data.equipment.type}_${data.equipment.name}` || equipmentName,\n            equipmentType: data.equipment.type || 'Unknown',\n            parameter: data.equipment.parameter || 'Unknown',\n            value: data.value,\n            timestamp: data.timestamp || new Date().toISOString(),\n            source: protocol,\n            location: `Steel Bonnet Brewery - ${data.equipment.type} Area`\n        };\n        \n        return msg;\n    }\n}\n\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 100,
    "wires": [["check_alert_thresholds"]]
  },
  {
    "id": "check_alert_thresholds",
    "type": "function",
    "z": "mqtt_alerts_bridge",
    "name": "Check Alert Thresholds",
    "func": "// Define alert thresholds for Steel Bonnet equipment\nconst alertThresholds = {\n    // Pump alerts\n    'Pumps_Pump_1': {\n        'FlowRate': { min: 50, max: 150, unit: 'GPM' },\n        'MotorCurrent': { min: 0, max: 30, unit: 'A' },\n        'Pressure': { min: 30, max: 80, unit: 'PSI' }\n    },\n    'Pumps_Pump_2': {\n        'FlowRate': { min: 60, max: 140, unit: 'GPM' },\n        'MotorCurrent': { min: 0, max: 25, unit: 'A' },\n        'Pressure': { min: 35, max: 75, unit: 'PSI' }\n    },\n    \n    // Boiler alerts\n    'Boilers_Boiler_1': {\n        'SteamPressure': { min: 15, max: 35, unit: 'PSI' },\n        'Temperature': { min: 160, max: 220, unit: 'Â°F' },\n        'GasFlow': { min: 50, max: 200, unit: 'CFM' }\n    },\n    \n    // Glycol Chiller alerts\n    'GlycolChillers_Chiller_1': {\n        'SupplyTemp': { min: 26, max: 34, unit: 'Â°F' },\n        'ReturnTemp': { min: 30, max: 38, unit: 'Â°F' },\n        'CompressorLoad': { min: 0, max: 95, unit: '%' }\n    },\n    \n    // Air Compressor alerts\n    'AirCompressors_Compressor_1': {\n        'Pressure': { min: 80, max: 130, unit: 'PSI' },\n        'RunHours': { min: 0, max: 8760, unit: 'hrs' }\n    },\n    \n    // Walk-in Chiller alerts\n    'WalkInChillers_Chiller_1': {\n        'Temperature': { min: 32, max: 42, unit: 'Â°F' },\n        'Humidity': { min: 40, max: 80, unit: '%' }\n    }\n};\n\nconst data = msg.payload;\nconst equipmentId = data.equipmentId;\nconst parameter = data.parameter;\nconst value = parseFloat(data.value);\n\n// Check if we have thresholds for this equipment/parameter\nconst equipmentThresholds = alertThresholds[equipmentId];\nif (!equipmentThresholds || !equipmentThresholds[parameter]) {\n    return null; // No thresholds defined\n}\n\nconst threshold = equipmentThresholds[parameter];\nlet alertTriggered = false;\nlet alertType = '';\nlet severity = 'Low';\nlet message = '';\n\n// Check thresholds\nif (value < threshold.min) {\n    alertTriggered = true;\n    alertType = `${parameter} Below Minimum`;\n    severity = value < (threshold.min * 0.8) ? 'Critical' : 'High';\n    message = `${parameter} is ${value}${threshold.unit}, below minimum of ${threshold.min}${threshold.unit}`;\n} else if (value > threshold.max) {\n    alertTriggered = true;\n    alertType = `${parameter} Above Maximum`;\n    severity = value > (threshold.max * 1.2) ? 'Critical' : 'High';\n    message = `${parameter} is ${value}${threshold.unit}, above maximum of ${threshold.max}${threshold.unit}`;\n}\n\n// Special case: Equipment status alerts\nif (parameter === 'Status' && data.value === 'Stopped') {\n    alertTriggered = true;\n    alertType = 'Equipment Stopped';\n    severity = 'High';\n    message = `${equipmentId} has stopped operation unexpectedly`;\n}\n\nif (alertTriggered) {\n    // Create alert message for n8n\n    msg.payload = {\n        alertType: alertType,\n        equipmentId: equipmentId,\n        severity: severity,\n        message: message,\n        timestamp: data.timestamp,\n        location: data.location,\n        value: `${value}${threshold.unit}`,\n        threshold: `${threshold.min}-${threshold.max}${threshold.unit}`,\n        parameter: parameter,\n        equipmentType: data.equipmentType\n    };\n    \n    // Set topic for n8n MQTT listener\n    msg.topic = 'iiot/alerts/critical';\n    \n    return msg;\n}\n\nreturn null; // No alert needed",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 600,
    "y": 100,
    "wires": [["publish_alert", "alert_debug"]]
  },
  {
    "id": "publish_alert",
    "type": "mqtt out",
    "z": "mqtt_alerts_bridge",
    "name": "Publish Alert to n8n",
    "topic": "",
    "qos": "1",
    "retain": "false",
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "mqtt_broker_config",
    "x": 860,
    "y": 100,
    "wires": []
  },
  {
    "id": "alert_debug",
    "type": "debug",
    "z": "mqtt_alerts_bridge",
    "name": "Alert Debug",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 140,
    "wires": []
  },
  {
    "id": "data_debug",
    "type": "debug",
    "z": "mqtt_alerts_bridge",
    "name": "Data Debug",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 350,
    "y": 140,
    "wires": []
  },
  {
    "id": "manual_test_alert",
    "type": "inject",
    "z": "mqtt_alerts_bridge",
    "name": "Test Alert",
    "props": [{"p": "payload"}, {"p": "topic", "vt": "str"}],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "iiot/alerts/critical",
    "payload": "{\"alertType\":\"Temperature Threshold\",\"equipmentId\":\"Boilers_Boiler_1\",\"severity\":\"Critical\",\"message\":\"Temperature is 225Â°F, above maximum of 220Â°F\",\"timestamp\":\"2025-06-03T16:30:00Z\",\"location\":\"Steel Bonnet Brewery - Boilers Area\",\"value\":\"225Â°F\",\"threshold\":\"160-220Â°F\",\"parameter\":\"Temperature\",\"equipmentType\":\"Boilers\"}",
    "payloadType": "json",
    "x": 120,
    "y": 200,
    "wires": [["publish_alert"]]
  },
  {
    "id": "alert_rate_limiter",
    "type": "function",
    "z": "mqtt_alerts_bridge",
    "name": "Rate Limit Alerts",
    "func": "// Prevent spam by rate limiting alerts for same equipment/parameter\nconst alertKey = `${msg.payload.equipmentId}_${msg.payload.parameter}`;\nconst now = Date.now();\nconst rateLimit = 300000; // 5 minutes\n\n// Get last alert times\nlet lastAlerts = flow.get('lastAlerts') || {};\n\n// Check if we sent an alert for this recently\nif (lastAlerts[alertKey] && (now - lastAlerts[alertKey]) < rateLimit) {\n    // Skip this alert\n    node.status({fill:'yellow', shape:'ring', text:`Rate limited: ${alertKey}`});\n    return null;\n}\n\n// Update last alert time\nlastAlerts[alertKey] = now;\nflow.set('lastAlerts', lastAlerts);\n\nnode.status({fill:'red', shape:'dot', text:`Alert: ${msg.payload.alertType}`});\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 600,
    "y": 160,
    "wires": [["publish_alert"]]
  }
]