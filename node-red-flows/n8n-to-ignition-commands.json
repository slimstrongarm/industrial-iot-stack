[
  {
    "id": "n8n_commands_bridge",
    "type": "tab",
    "label": "🎛️ n8n → Ignition Commands",
    "disabled": false,
    "info": "Receive commands from n8n and write to Ignition tags"
  },
  {
    "id": "command_listener",
    "type": "mqtt in",
    "z": "n8n_commands_bridge",
    "name": "Listen for Commands",
    "topic": "iiot/commands/+/+",
    "qos": "1",
    "datatype": "json",
    "broker": "mqtt_broker_config",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 140,
    "y": 100,
    "wires": [["parse_command", "command_debug"]]
  },
  {
    "id": "parse_command",
    "type": "function",
    "z": "n8n_commands_bridge",
    "name": "Parse Command",
    "func": "// Parse incoming commands from n8n\nconst data = msg.payload;\nconst topic = msg.topic;\n\n// Extract command info from topic: iiot/commands/equipmentId/action\nconst topicParts = topic.split('/');\nif (topicParts.length >= 4) {\n    const equipmentId = topicParts[2];\n    const action = topicParts[3];\n    \n    // Validate command structure\n    if (data && data.command && data.value !== undefined) {\n        // Map equipment ID to OPC-UA node paths\n        const equipmentMapping = {\n            'Pumps_Pump_1': 'Steel_Bonnet/Equipment/Pumps/Pump_1',\n            'Pumps_Pump_2': 'Steel_Bonnet/Equipment/Pumps/Pump_2',\n            'Boilers_Boiler_1': 'Steel_Bonnet/Equipment/Boilers/Boiler_1',\n            'GlycolChillers_Chiller_1': 'Steel_Bonnet/Equipment/GlycolChillers/Chiller_1',\n            'AirCompressors_Compressor_1': 'Steel_Bonnet/Equipment/AirCompressors/Compressor_1',\n            'WalkInChillers_Chiller_1': 'Steel_Bonnet/Equipment/WalkInChillers/Chiller_1'\n        };\n        \n        const equipmentPath = equipmentMapping[equipmentId];\n        if (!equipmentPath) {\n            node.error(`Unknown equipment ID: ${equipmentId}`);\n            return null;\n        }\n        \n        // Create OPC-UA write command\n        const nodeId = `ns=2;s=${equipmentPath}/${data.parameter || action}`;\n        \n        msg.payload = {\n            nodeId: nodeId,\n            value: data.value,\n            datatype: data.datatype || 'Double',\n            command: data.command,\n            equipmentId: equipmentId,\n            action: action,\n            timestamp: new Date().toISOString(),\n            source: 'n8n_command'\n        };\n        \n        return msg;\n    }\n}\n\nnode.error('Invalid command format');\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 330,
    "y": 100,
    "wires": [["validate_command"]]
  },
  {
    "id": "validate_command",
    "type": "function",
    "z": "n8n_commands_bridge",
    "name": "Validate Command",
    "func": "// Validate commands before writing to Ignition\nconst cmd = msg.payload;\n\n// Define allowed commands and ranges\nconst commandValidation = {\n    'Pumps_Pump_1': {\n        'FlowRateSetpoint': { min: 0, max: 150, datatype: 'Double' },\n        'Start': { value: true, datatype: 'Boolean' },\n        'Stop': { value: false, datatype: 'Boolean' },\n        'Reset': { value: true, datatype: 'Boolean' }\n    },\n    'Pumps_Pump_2': {\n        'FlowRateSetpoint': { min: 0, max: 140, datatype: 'Double' },\n        'Start': { value: true, datatype: 'Boolean' },\n        'Stop': { value: false, datatype: 'Boolean' },\n        'Reset': { value: true, datatype: 'Boolean' }\n    },\n    'Boilers_Boiler_1': {\n        'TemperatureSetpoint': { min: 160, max: 220, datatype: 'Double' },\n        'PressureSetpoint': { min: 15, max: 35, datatype: 'Double' },\n        'Start': { value: true, datatype: 'Boolean' },\n        'Stop': { value: false, datatype: 'Boolean' },\n        'EmergencyShutdown': { value: true, datatype: 'Boolean' }\n    },\n    'GlycolChillers_Chiller_1': {\n        'SupplyTempSetpoint': { min: 26, max: 34, datatype: 'Double' },\n        'Start': { value: true, datatype: 'Boolean' },\n        'Stop': { value: false, datatype: 'Boolean' }\n    },\n    'AirCompressors_Compressor_1': {\n        'PressureSetpoint': { min: 80, max: 130, datatype: 'Double' },\n        'Start': { value: true, datatype: 'Boolean' },\n        'Stop': { value: false, datatype: 'Boolean' }\n    }\n};\n\nconst equipmentValidation = commandValidation[cmd.equipmentId];\nif (!equipmentValidation) {\n    node.error(`No validation rules for equipment: ${cmd.equipmentId}`);\n    return null;\n}\n\nconst paramValidation = equipmentValidation[cmd.action];\nif (!paramValidation) {\n    node.error(`Invalid command '${cmd.action}' for equipment '${cmd.equipmentId}'`);\n    return null;\n}\n\n// Validate value ranges\nif (paramValidation.min !== undefined && cmd.value < paramValidation.min) {\n    node.error(`Value ${cmd.value} below minimum ${paramValidation.min}`);\n    return null;\n}\n\nif (paramValidation.max !== undefined && cmd.value > paramValidation.max) {\n    node.error(`Value ${cmd.value} above maximum ${paramValidation.max}`);\n    return null;\n}\n\n// Set correct datatype\ncmd.datatype = paramValidation.datatype;\n\n// For fixed value commands, override the value\nif (paramValidation.value !== undefined) {\n    cmd.value = paramValidation.value;\n}\n\nnode.status({fill:'green', shape:'dot', text:`Validated: ${cmd.equipmentId} ${cmd.action}`});\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 520,
    "y": 100,
    "wires": [["write_to_ignition"]]
  },
  {
    "id": "write_to_ignition",
    "type": "function",
    "z": "n8n_commands_bridge",
    "name": "Write to Ignition",
    "func": "// Prepare message for OPC-UA write\nconst cmd = msg.payload;\n\n// Create OPC-UA Item message\nmsg.payload = {\n    messageType: 'Variable',\n    variableName: cmd.nodeId,\n    variableValue: cmd.value,\n    attributeId: 13 // Value attribute\n};\n\nmsg.topic = cmd.nodeId;\n\n// Log the write operation\nconst logEntry = {\n    timestamp: cmd.timestamp,\n    equipmentId: cmd.equipmentId,\n    action: cmd.action,\n    nodeId: cmd.nodeId,\n    value: cmd.value,\n    datatype: cmd.datatype,\n    source: cmd.source\n};\n\n// Store in flow context for audit trail\nlet writeLog = flow.get('ignition_write_log') || [];\nwriteLog.push(logEntry);\n\n// Keep only last 100 entries\nif (writeLog.length > 100) {\n    writeLog = writeLog.slice(-100);\n}\n\nflow.set('ignition_write_log', writeLog);\n\nnode.status({fill:'blue', shape:'ring', text:`Writing: ${cmd.action} = ${cmd.value}`});\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 720,
    "y": 100,
    "wires": [["opc_writer", "write_confirmation"]]
  },
  {
    "id": "opc_writer",
    "type": "OpcUa-Item",
    "z": "n8n_commands_bridge",
    "item": "",
    "datatype": "NodeId",
    "value": "",
    "name": "Write to OPC-UA",
    "x": 920,
    "y": 100,
    "wires": [["write_result"]]
  },
  {
    "id": "write_result",
    "type": "function",
    "z": "n8n_commands_bridge",
    "name": "Handle Write Result",
    "func": "// Handle the result of the OPC-UA write\nconst success = msg.statusCode && msg.statusCode.name === 'Good';\n\nif (success) {\n    node.status({fill:'green', shape:'dot', text:'Write successful'});\n    \n    // Publish success confirmation\n    msg.payload = {\n        status: 'success',\n        message: 'Command executed successfully',\n        timestamp: new Date().toISOString()\n    };\n    msg.topic = 'iiot/commands/status';\n} else {\n    node.status({fill:'red', shape:'ring', text:'Write failed'});\n    \n    // Publish error\n    msg.payload = {\n        status: 'error',\n        message: `Write failed: ${msg.statusCode ? msg.statusCode.description : 'Unknown error'}`,\n        timestamp: new Date().toISOString()\n    };\n    msg.topic = 'iiot/commands/status';\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1110,
    "y": 100,
    "wires": [["publish_status"]]
  },
  {
    "id": "publish_status",
    "type": "mqtt out",
    "z": "n8n_commands_bridge",
    "name": "Publish Status",
    "topic": "",
    "qos": "1",
    "retain": "false",
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "mqtt_broker_config",
    "x": 1300,
    "y": 100,
    "wires": []
  },
  {
    "id": "write_confirmation",
    "type": "debug",
    "z": "n8n_commands_bridge",
    "name": "Write Confirmation",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 960,
    "y": 140,
    "wires": []
  },
  {
    "id": "command_debug",
    "type": "debug",
    "z": "n8n_commands_bridge",
    "name": "Command Debug",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 350,
    "y": 140,
    "wires": []
  },
  {
    "id": "test_command",
    "type": "inject",
    "z": "n8n_commands_bridge",
    "name": "Test: Start Pump",
    "props": [{"p": "payload"}, {"p": "topic", "vt": "str"}],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "iiot/commands/Pumps_Pump_1/Start",
    "payload": "{\"command\":\"Start\",\"parameter\":\"Start\",\"value\":true,\"datatype\":\"Boolean\"}",
    "payloadType": "json",
    "x": 130,
    "y": 200,
    "wires": [["parse_command"]]
  },
  {
    "id": "test_setpoint",
    "type": "inject",
    "z": "n8n_commands_bridge",
    "name": "Test: Flow Setpoint",
    "props": [{"p": "payload"}, {"p": "topic", "vt": "str"}],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "iiot/commands/Pumps_Pump_1/FlowRateSetpoint",
    "payload": "{\"command\":\"SetFlowRate\",\"parameter\":\"FlowRateSetpoint\",\"value\":85.5,\"datatype\":\"Double\"}",
    "payloadType": "json",
    "x": 140,
    "y": 240,
    "wires": [["parse_command"]]
  }
]