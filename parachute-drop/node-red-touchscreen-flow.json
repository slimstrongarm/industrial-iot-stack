[
  {
    "id": "parachute_drop_ui",
    "type": "tab",
    "label": "ü™Ç Parachute Drop Dashboard",
    "disabled": false,
    "info": "Instant deployment dashboard for industrial facilities"
  },
  {
    "id": "ui_group_main",
    "type": "ui_group",
    "name": "Live Sensors",
    "tab": "ui_tab_main",
    "order": 1,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "ui_tab_main",
    "type": "ui_tab",
    "name": "ü™Ç Facility Monitor",
    "icon": "dashboard",
    "order": 1
  },
  {
    "id": "phidget_hub",
    "type": "phidget22-hub",
    "name": "Parachute Drop Hub",
    "serial": "-1",
    "hostname": "localhost",
    "port": "5661"
  },
  {
    "id": "mqtt_broker",
    "type": "mqtt-broker",
    "name": "EMQX Local",
    "broker": "localhost",
    "port": "1883",
    "clientid": "parachute_drop_pi",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "5",
    "keepalive": "60",
    "cleansession": true
  },
  {
    "id": "temp_sensor_1",
    "type": "phidget22-temperature",
    "name": "Temperature Sensor 1",
    "phidgetServer": "phidget_hub",
    "channel": "0",
    "x": 150,
    "y": 100,
    "wires": [["temp_gauge", "mqtt_publish_temp", "data_logger"]]
  },
  {
    "id": "temp_gauge",
    "type": "ui_gauge",
    "name": "Temperature",
    "group": "ui_group_main",
    "order": 1,
    "width": "6",
    "height": "4",
    "gtype": "gage",
    "title": "Temperature",
    "label": "¬∞C",
    "format": "{{value | number:1}}",
    "min": 0,
    "max": 100,
    "colors": ["#00b500", "#e6e600", "#ca3838"],
    "seg1": 20,
    "seg2": 70,
    "x": 400,
    "y": 100,
    "wires": []
  },
  {
    "id": "pressure_sensor_1",
    "type": "phidget22-voltageratio",
    "name": "Pressure Sensor 1",
    "phidgetServer": "phidget_hub",
    "channel": "1",
    "x": 150,
    "y": 200,
    "wires": [["pressure_scale", "mqtt_publish_pressure", "data_logger"]]
  },
  {
    "id": "pressure_scale",
    "type": "function",
    "name": "Scale to PSI",
    "func": "// Scale voltage ratio to PSI\n// Assuming 0-1 ratio = 0-150 PSI\nconst psi = msg.payload * 150;\nmsg.payload = Math.round(psi * 10) / 10;\nreturn msg;",
    "outputs": 1,
    "x": 350,
    "y": 200,
    "wires": [["pressure_gauge"]]
  },
  {
    "id": "pressure_gauge",
    "type": "ui_gauge",
    "name": "Pressure",
    "group": "ui_group_main",
    "order": 2,
    "width": "6",
    "height": "4",
    "gtype": "gage",
    "title": "Pressure",
    "label": "PSI",
    "format": "{{value}}",
    "min": 0,
    "max": 150,
    "colors": ["#00b500", "#e6e600", "#ca3838"],
    "seg1": 50,
    "seg2": 100,
    "x": 550,
    "y": 200,
    "wires": []
  },
  {
    "id": "discovery_scanner",
    "type": "function",
    "name": "Network Discovery",
    "func": "// Parachute Drop Network Discovery\n// Scans for industrial devices and maps network\n\nconst discovered = flow.get('discovered_devices') || [];\n\n// Add discovery logic here\n// This would interface with python discovery agent\n\nmsg.payload = {\n    devices_found: discovered.length,\n    scan_time: new Date().toISOString(),\n    network_map: discovered\n};\n\nreturn msg;",
    "outputs": 1,
    "x": 150,
    "y": 400,
    "wires": [["discovery_display", "mqtt_publish_discovery"]]
  },
  {
    "id": "data_logger",
    "type": "file",
    "name": "Local Data Cache",
    "filename": "/home/pi/parachute_drop/data_cache.csv",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 600,
    "y": 350,
    "wires": [[]]
  },
  {
    "id": "facility_info",
    "type": "ui_template",
    "name": "Facility Header",
    "group": "ui_group_main",
    "order": 0,
    "width": "12",
    "height": "2",
    "format": "<div style=\"text-align:center; padding:10px; background:#1e3a52; color:white; border-radius:5px;\">\n    <h2>ü™Ç Parachute Drop Active</h2>\n    <p>Facility: {{msg.facility || 'Auto-Detecting...'}}</p>\n    <p>Status: <span style=\"color:#4CAF50;\">‚óè COLLECTING DATA</span></p>\n</div>",
    "x": 400,
    "y": 50,
    "wires": [[]]
  },
  {
    "id": "mqtt_publish_temp",
    "type": "mqtt out",
    "name": "Publish Temperature",
    "topic": "parachute/sensors/temp_1",
    "qos": "1",
    "retain": "true",
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "broker": "mqtt_broker",
    "x": 400,
    "y": 150,
    "wires": []
  },
  {
    "id": "alert_system",
    "type": "function",
    "name": "Alert Generator",
    "func": "// Check thresholds and generate alerts\nconst thresholds = flow.get('alert_thresholds') || {};\n\nif (msg.topic.includes('temp') && msg.payload > 80) {\n    msg.alert = {\n        level: 'warning',\n        message: 'High temperature detected',\n        value: msg.payload,\n        timestamp: new Date()\n    };\n    return msg;\n}\n\nreturn null;",
    "outputs": 1,
    "x": 350,
    "y": 450,
    "wires": [["alert_display", "remote_alert"]]
  }
]