[
    {
        "id": "steel-bonnet-whatsapp-tab",
        "type": "tab",
        "label": "Steel Bonnet WhatsApp Alerts",
        "disabled": false,
        "info": "WhatsApp integration for Steel Bonnet brewery equipment using actual MQTT topic structure"
    },
    {
        "id": "mqtt-steel-bonnet-telemetry",
        "type": "mqtt in",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Steel Bonnet Telemetry",
        "topic": "+/+/+/telemetry",
        "qos": "2",
        "datatype": "json",
        "broker": "steel-bonnet-mqtt",
        "x": 140,
        "y": 160,
        "wires": [["parse-steel-bonnet-data"]]
    },
    {
        "id": "parse-steel-bonnet-data",
        "type": "function",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Parse Steel Bonnet Data & Check Thresholds",
        "func": "// Parse Steel Bonnet MQTT topic: site/area/equipment/telemetry\nconst topicParts = msg.topic.split('/');\nconst site = topicParts[0];           // e.g., 'salinas', 'scotts_valley'\nconst area = topicParts[1];           // e.g., 'utilities', 'brew_house', 'cellar'\nconst equipment = topicParts[2];      // e.g., 'air_compressor_01', 'mash_tun_01'\nconst messageType = topicParts[3];    // Should be 'telemetry'\n\n// Equipment-specific thresholds based on Steel Bonnet equipment types\nconst thresholds = {\n    // Air Compressor thresholds\n    'air_compressor_01': {\n        'temperature': { high: 85, low: 10 },\n        'pressure': { high: 150, low: 80 },\n        'runtime_hours': { high: 8760 }  // 1 year\n    },\n    \n    // Walk-in Chiller thresholds  \n    'walk_in_chiller': {\n        'temperature': { high: 40, low: 32 },\n        'humidity': { high: 85, low: 40 }\n    },\n    \n    // Mash Tun thresholds\n    'mash_tun_01': {\n        'temperature': { high: 175, low: 145 },\n        'pressure': { high: 20, low: 0 }\n    },\n    \n    // Fermenter thresholds\n    'fermenter_01': {\n        'temperature': { high: 75, low: 65 },\n        'pressure': { high: 15, low: 0 }\n    },\n    \n    // Glycol Chiller thresholds\n    'glycol_chiller': {\n        'temperature': { high: 45, low: 28 },\n        'pressure': { high: 30, low: 10 }\n    },\n    \n    // Boiler thresholds\n    'boiler': {\n        'temperature': { high: 220, low: 180 },\n        'pressure': { high: 25, low: 5 }\n    }\n};\n\n// Check if we have thresholds for this equipment\nif (thresholds[equipment]) {\n    const equipmentThresholds = thresholds[equipment];\n    const payload = msg.payload;\n    \n    // Check each measurement in the payload\n    for (const [measurement, value] of Object.entries(payload)) {\n        if (typeof value === 'number' && equipmentThresholds[measurement]) {\n            const limits = equipmentThresholds[measurement];\n            let alert = null;\n            \n            if (limits.high && value > limits.high) {\n                alert = {\n                    severity: 'HIGH',\n                    message: `${equipment} ${measurement} too high`,\n                    value: value,\n                    limit: limits.high,\n                    site: site,\n                    area: area,\n                    equipment: equipment,\n                    measurement: measurement,\n                    unit: getUnit(measurement)\n                };\n            } else if (limits.low && value < limits.low) {\n                alert = {\n                    severity: 'LOW', \n                    message: `${equipment} ${measurement} too low`,\n                    value: value,\n                    limit: limits.low,\n                    site: site,\n                    area: area,\n                    equipment: equipment,\n                    measurement: measurement,\n                    unit: getUnit(measurement)\n                };\n            }\n            \n            if (alert) {\n                // Rate limiting: only send if no alert for this equipment/measurement in last 5 minutes\n                const alertKey = `${equipment}_${measurement}`;\n                const lastAlert = flow.get(`lastAlert_${alertKey}`) || 0;\n                const now = Date.now();\n                \n                if (now - lastAlert > 300000) { // 5 minutes\n                    flow.set(`lastAlert_${alertKey}`, now);\n                    msg.alert = alert;\n                    msg.originalPayload = payload;\n                    return msg;\n                }\n            }\n        }\n    }\n}\n\n// Helper function to get measurement units\nfunction getUnit(measurement) {\n    const units = {\n        'temperature': '¬∞F',\n        'pressure': 'PSI',\n        'humidity': '%RH',\n        'runtime_hours': 'hrs',\n        'flow': 'GPM',\n        'setpoint': '¬∞F'\n    };\n    return units[measurement] || '';\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 160,
        "wires": [["format-steel-bonnet-alert"]]
    },
    {
        "id": "format-steel-bonnet-alert",
        "type": "function",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Format Steel Bonnet WhatsApp Alert",
        "func": "const alert = msg.alert;\nconst timestamp = new Date().toLocaleString();\n\n// Emoji based on severity and equipment area\nconst severityEmoji = alert.severity === 'HIGH' ? 'üî¥' : 'üü°';\nconst areaEmoji = {\n    'utilities': '‚ö°',\n    'brew_house': 'üç∫',\n    'cellar': 'üè≠',\n    'production': 'üèóÔ∏è'\n};\n\n// Format equipment name for display\nconst equipmentDisplay = alert.equipment.replace(/_/g, ' ').toUpperCase();\nconst areaDisplay = alert.area.replace(/_/g, ' ').toUpperCase();\n\n// Create professional Steel Bonnet alert message\nconst message = `${severityEmoji} STEEL BONNET ALERT\n\nSite: ${alert.site.toUpperCase()}\n${areaEmoji[alert.area] || 'üè≠'} Area: ${areaDisplay}\nEquipment: ${equipmentDisplay}\n\n‚ö†Ô∏è Issue: ${alert.measurement.toUpperCase()} ${alert.severity}\nCurrent: ${alert.value} ${alert.unit}\nThreshold: ${alert.limit} ${alert.unit}\nTime: ${timestamp}\n\nüéØ Quick Actions:\n1Ô∏è‚É£ Acknowledge alert\n2Ô∏è‚É£ Request equipment details\n3Ô∏è‚É£ Escalate to supervisor\n4Ô∏è‚É£ View full telemetry data\n\nReply with number for action.`;\n\n// Set recipient from environment or default\nconst recipient = env.get('STEEL_BONNET_ALERT_TO') || 'whatsapp:+1234567890';\n\nmsg.payload = {\n    to: recipient,\n    body: message,\n    alert: alert,\n    originalTopic: msg.topic,\n    originalData: msg.originalPayload\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 160,
        "wires": [["send-twilio-alert", "log-steel-bonnet-alert"]]
    },
    {
        "id": "send-twilio-alert",
        "type": "function",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Send via Twilio (Steel Bonnet)",
        "func": "// Twilio credentials from environment\nconst accountSid = env.get('TWILIO_ACCOUNT_SID');\nconst authToken = env.get('TWILIO_AUTH_TOKEN');\nconst fromNumber = env.get('TWILIO_WHATSAPP_FROM') || 'whatsapp:+14155238886';\n\nif (!accountSid || !authToken) {\n    node.error('Twilio credentials not configured for Steel Bonnet alerts');\n    node.status({fill:\"red\",shape:\"dot\",text:\"No credentials\"});\n    return null;\n}\n\n// Prepare Twilio API request\nmsg.method = 'POST';\nmsg.url = `https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`;\n\n// Basic auth header\nconst auth = Buffer.from(`${accountSid}:${authToken}`).toString('base64');\nmsg.headers = {\n    'Authorization': `Basic ${auth}`,\n    'Content-Type': 'application/x-www-form-urlencoded'\n};\n\n// URL encode the payload\nconst params = new URLSearchParams();\nparams.append('From', fromNumber);\nparams.append('To', msg.payload.to);\nparams.append('Body', msg.payload.body);\n\nmsg.payload = params.toString();\n\nnode.status({fill:\"blue\",shape:\"dot\",text:\"Sending alert...\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 980,
        "y": 120,
        "wires": [["twilio-http-request"]]
    },
    {
        "id": "twilio-http-request",
        "type": "http request",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Twilio API Call",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1200,
        "y": 120,
        "wires": [["check-twilio-response"]]
    },
    {
        "id": "check-twilio-response",
        "type": "function",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Check Twilio Response",
        "func": "if (msg.statusCode === 201) {\n    // Success\n    const equipment = msg.payload.alert?.equipment || 'equipment';\n    msg.payload = {\n        status: 'sent',\n        messageId: msg.payload.sid,\n        to: msg.payload.to,\n        equipment: equipment\n    };\n    node.status({fill:\"green\",shape:\"dot\",text:`Alert sent: ${equipment}`});\n} else {\n    // Error\n    msg.payload = {\n        status: 'error',\n        error: msg.payload,\n        statusCode: msg.statusCode\n    };\n    node.status({fill:\"red\",shape:\"dot\",text:\"Send failed\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 120,
        "wires": [["debug-steel-bonnet"]]
    },
    {
        "id": "log-steel-bonnet-alert",
        "type": "function",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Log to Steel Bonnet Sheets",
        "func": "// Prepare comprehensive log entry for Steel Bonnet system\nmsg.payload = {\n    timestamp: new Date().toISOString(),\n    site: msg.payload.alert.site,\n    area: msg.payload.alert.area,\n    equipment: msg.payload.alert.equipment,\n    measurement: msg.payload.alert.measurement,\n    severity: msg.payload.alert.severity,\n    currentValue: msg.payload.alert.value,\n    threshold: msg.payload.alert.limit,\n    unit: msg.payload.alert.unit,\n    mqttTopic: msg.originalTopic,\n    whatsappSent: true,\n    recipient: msg.payload.to,\n    fullTelemetryData: JSON.stringify(msg.originalData)\n};\n\n// Set topic for Google Sheets logging\nmsg.topic = 'log_steel_bonnet_alert';\n\nreturn msg;",
        "outputs": 1,\n        "noerr": 0,\n        "initialize": "",\n        "finalize": "",\n        "x": 980,\n        "y": 200,\n        "wires": [["steel-bonnet-sheets-api"]]\n    },\n    {\n        "id": "steel-bonnet-sheets-api",\n        "type": "function",\n        "z": "steel-bonnet-whatsapp-tab",\n        "name": "Google Sheets Steel Bonnet Log",\n        "func": "// This would connect to Google Sheets to log Steel Bonnet alerts\n// For now, format the data for logging\nmsg.steelBonnetLog = {\n    ...msg.payload,\n    loggedAt: new Date().toISOString(),\n    source: 'Steel Bonnet MQTT'\n};\n\n// Could implement actual Google Sheets API call here\nnode.warn(`Steel Bonnet Alert Logged: ${msg.payload.equipment} - ${msg.payload.measurement}`);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1250,
        "y": 200,
        "wires": [[]]
    },
    {
        "id": "debug-steel-bonnet",
        "type": "debug",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Steel Bonnet Alert Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 120,
        "wires": []
    },
    {
        "id": "steel-bonnet-webhook",
        "type": "http in",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Steel Bonnet WhatsApp Webhook",
        "url": "/webhook/steel-bonnet-whatsapp",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 380,
        "wires": [["parse-steel-bonnet-reply"]]
    },
    {
        "id": "parse-steel-bonnet-reply",
        "type": "function",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Parse Steel Bonnet Operator Reply",
        "func": "// Parse Twilio webhook payload for Steel Bonnet system\nconst from = msg.payload.From;\nconst body = msg.payload.Body.toLowerCase();\nconst messageId = msg.payload.MessageSid;\n\n// Determine action from reply\nlet action = null;\nlet response = null;\n\nif (body.includes('1') || body.includes('acknowledge')) {\n    action = 'acknowledge';\n    response = '‚úÖ Steel Bonnet alert acknowledged. Maintenance team notified.';\n} else if (body.includes('2') || body.includes('details')) {\n    action = 'details';\n    response = getEquipmentDetails(); // Will implement based on last alert\n} else if (body.includes('3') || body.includes('escalate')) {\n    action = 'escalate';\n    response = 'üö® Alert escalated to brewery supervisor. They will contact you shortly.';\n} else if (body.includes('4') || body.includes('telemetry')) {\n    action = 'telemetry';\n    response = 'Loading full telemetry data from Steel Bonnet system...';\n}\n\n// Helper function for equipment details\nfunction getEquipmentDetails() {\n    // This would query the actual Steel Bonnet system\n    return `üìä Steel Bonnet Equipment Status:\\n\\nüè≠ All Systems Overview:\\n‚Ä¢ Air Compressor: ‚úÖ Operating\\n‚Ä¢ Glycol Chiller: ‚úÖ Normal\\n‚Ä¢ Mash Tun: ‚úÖ Ready\\n‚Ä¢ Fermenters: ‚úÖ Active\\n\\nüîß Maintenance:\\n‚Ä¢ Last service: 5 days ago\\n‚Ä¢ Next scheduled: 25 days\\n\\nüìà View dashboard: [Steel Bonnet HMI]`;\n}\n\nmsg.reply = {\n    from: from,\n    action: action,\n    response: response,\n    originalMessage: body,\n    timestamp: new Date(),\n    system: 'Steel Bonnet'\n};\n\nif (action) {\n    return [msg, null]; // Valid action\n} else {\n    return [null, msg]; // Unknown command\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 380,
        "wires": [["handle-steel-bonnet-action"], ["steel-bonnet-help"]]
    },
    {
        "id": "handle-steel-bonnet-action",
        "type": "switch",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Route Steel Bonnet Action",
        "property": "reply.action",
        "propertyType": "msg",
        "rules": [
            {"t": "eq", "v": "acknowledge", "vt": "str"},
            {"t": "eq", "v": "details", "vt": "str"},
            {"t": "eq", "v": "escalate", "vt": "str"},
            {"t": "eq", "v": "telemetry", "vt": "str"}
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 750,
        "y": 360,
        "wires": [
            ["send-steel-bonnet-confirmation"],
            ["send-steel-bonnet-confirmation"], 
            ["escalate-steel-bonnet"],
            ["get-telemetry-data"]
        ]
    },
    {
        "id": "escalate-steel-bonnet",
        "type": "function",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Escalate to Steel Bonnet Supervisor",
        "func": "// Escalate Steel Bonnet alert to supervisor\nconst supervisorNumber = env.get('STEEL_BONNET_SUPERVISOR') || 'whatsapp:+1234567891';\n\nmsg.payload = {\n    escalateTo: supervisorNumber,\n    response: msg.reply.response,\n    originalAlert: msg.reply,\n    escalationTime: new Date().toISOString()\n};\n\n// Also send notification to supervisor\nmsg.supervisorAlert = {\n    to: supervisorNumber,\n    body: `üö® STEEL BONNET ESCALATION\\n\\nOperator ${msg.reply.from} has escalated an equipment alert.\\n\\nOriginal message: \"${msg.reply.originalMessage}\"\\n\\nTime: ${new Date().toLocaleString()}\\n\\nPlease contact operator immediately.`\n};\n\nreturn [msg, {payload: msg.supervisorAlert}];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1060,
        "y": 400,
        "wires": [["send-steel-bonnet-confirmation"], ["send-twilio-alert"]]
    },
    {
        "id": "get-telemetry-data",
        "type": "function",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Get Steel Bonnet Telemetry",
        "func": "// This would interface with Steel Bonnet's real telemetry system\n// For demo, return formatted telemetry data\n\nconst telemetryData = `üì° STEEL BONNET TELEMETRY\\n\\nüè≠ Salinas Brewery - Live Data:\\n\\n‚ö° UTILITIES:\\n‚Ä¢ Air Compressor: 125 PSI, 78¬∞F\\n‚Ä¢ Glycol Chiller: 32¬∞F, 15 PSI\\n\\nüç∫ BREW HOUSE:\\n‚Ä¢ Mash Tun: 152¬∞F, 2 PSI\\n‚Ä¢ Boiler: 212¬∞F, 8 PSI\\n\\nüè≠ CELLAR:\\n‚Ä¢ Fermenter 01: 68¬∞F, 12 PSI\\n‚Ä¢ Walk-in Chiller: 38¬∞F, 65% RH\\n\\n‚è∞ Last updated: ${new Date().toLocaleString()}\\n\\nüîó Full dashboard: [Steel Bonnet HMI]`;\n\nmsg.reply.response = telemetryData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 440,
        "wires": [["send-steel-bonnet-confirmation"]]
    },
    {
        "id": "steel-bonnet-help",
        "type": "function",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Steel Bonnet Help Response",
        "func": "msg.reply.response = `üç∫ STEEL BONNET COMMANDS\\n\\nI didn't understand that. Available commands:\\n\\n1Ô∏è‚É£ or 'acknowledge' - Acknowledge alert\\n2Ô∏è‚É£ or 'details' - Equipment status\\n3Ô∏è‚É£ or 'escalate' - Contact supervisor\\n4Ô∏è‚É£ or 'telemetry' - Live system data\\n\\nExample: Reply '1' to acknowledge the alert.\\n\\nüè≠ Steel Bonnet Brewery Automation`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 750,
        "y": 420,
        "wires": [["send-steel-bonnet-confirmation"]]
    },
    {
        "id": "send-steel-bonnet-confirmation",
        "type": "function",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Send Steel Bonnet WhatsApp Reply",
        "func": "// Format reply message for Steel Bonnet system\nmsg.payload = {\n    to: msg.reply.from,\n    body: msg.reply.response\n};\n\nnode.status({fill:\"green\",shape:\"dot\",text:\"Sending Steel Bonnet reply\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1120,
        "y": 360,
        "wires": [["send-twilio-alert"]]
    },
    {
        "id": "steel-bonnet-webhook-response",
        "type": "http response",
        "z": "steel-bonnet-whatsapp-tab",
        "name": "Steel Bonnet Webhook Response",
        "statusCode": "200",
        "headers": {},
        "x": 520,
        "y": 460,
        "wires": []
    },
    {
        "id": "steel-bonnet-mqtt",
        "type": "mqtt-broker",
        "name": "Steel Bonnet MQTT",
        "broker": "localhost",
        "port": "1883",
        "clientid": "steel-bonnet-whatsapp",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    }
]