# Telegraf Configuration for Industrial IoT

[global_tags]
  environment = "production"
  site = "industrial-iot"

[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

# Output to InfluxDB v2
[[outputs.influxdb_v2]]
  urls = ["${INFLUX_URL}"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${INFLUX_BUCKET}"

# MQTT Consumer for Industrial Data
[[inputs.mqtt_consumer]]
  servers = ["${MQTT_SERVER}"]
  topics = [
    "iiot/+/+/+/+",
    "iiot/+/+/+"
  ]
  qos = 0
  connection_timeout = "30s"
  client_id = "telegraf-${HOSTNAME}"
  data_format = "json"
  json_name_key = "measurement"
  tag_keys = ["equipment", "area", "line", "type"]

  # Parse MQTT topic to extract tags
  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "iiot/+/+/+/+"
    measurement = "_/_/_/measurement/_"
    tags = "_/site/area/equipment/_"

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "iiot/+/+/+"
    measurement = "_/_/measurement/_"
    tags = "_/site/area/_"

# Modbus Input (if needed for direct device communication)
[[inputs.modbus]]
  name = "PLC_Data"
  slave_id = 1
  timeout = "1s"
  controller = "tcp://plc-ip:502"
  
  # Holding registers
  holding_registers = [
    { name = "temperature", byte_order = "AB", data_type = "FLOAT32", scale = 1.0, address = [0, 1] },
    { name = "pressure", byte_order = "AB", data_type = "FLOAT32", scale = 1.0, address = [2, 3] },
    { name = "flow_rate", byte_order = "AB", data_type = "FLOAT32", scale = 1.0, address = [4, 5] },
    { name = "level", byte_order = "AB", data_type = "FLOAT32", scale = 1.0, address = [6, 7] }
  ]

# OPC UA Input (for Ignition or other OPC UA servers)
[[inputs.opcua]]
  name = "opcua_metrics"
  endpoint = "opc.tcp://ignition:62541"
  security_policy = "None"
  security_mode = "None"
  connect_timeout = "10s"
  request_timeout = "5s"
  
  nodes = [
    {name="production_count", namespace="2", identifier_type="s", identifier="Devices/PLC/ProductionCount"},
    {name="machine_state", namespace="2", identifier_type="s", identifier="Devices/PLC/MachineState"},
    {name="temperature", namespace="2", identifier_type="s", identifier="Devices/PLC/Temperature"}
  ]

# Docker monitoring
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  container_names = []
  source_tag = false
  container_name_include = []
  container_name_exclude = []
  timeout = "5s"
  perdevice = true
  total = false
  docker_label_include = []
  docker_label_exclude = []

# System monitoring
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

[[inputs.diskio]]

[[inputs.kernel]]

[[inputs.mem]]

[[inputs.processes]]

[[inputs.swap]]

[[inputs.system]]

# Custom HTTP endpoint monitoring
[[inputs.http_response]]
  urls = [
    "http://ignition:8088/StatusPing",
    "http://node-red:1880/health",
    "http://grafana:3000/api/health"
  ]
  response_timeout = "5s"
  method = "GET"
  follow_redirects = false

# PostgreSQL monitoring
[[inputs.postgresql]]
  address = "host=postgres user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} sslmode=disable dbname=postgres"
  databases = ["ignition", "postgres"]

# Industrial-specific processors
[[processors.regex]]
  [[processors.regex.tags]]
    key = "topic"
    pattern = "^iiot/([^/]+)/([^/]+)/([^/]+).*"
    replacement = "${1}"
    result_key = "site"

  [[processors.regex.tags]]
    key = "topic"
    pattern = "^iiot/[^/]+/([^/]+)/([^/]+).*"
    replacement = "${1}"
    result_key = "area"

  [[processors.regex.tags]]
    key = "topic"
    pattern = "^iiot/[^/]+/[^/]+/([^/]+).*"
    replacement = "${1}"
    result_key = "equipment"

# Add timestamp precision
[[processors.date]]
  field_key = "timestamp"
  date_format = "unix_ms"
  timezone = "America/Chicago"